'''
CS 5001
Fall 2019
Homework #7
'''
  In this project, it does not have any beyond the 4 basics ones in the
framework. instead, it uses functions as the core to run the game. In this game,
it has lists, dictionaries, functions and classes.
  The non-class functions as blow:
    Name: read_txt
    Input: string, name of the file
    Output: nothing
    Does: read data from txt document and store it in a list

    Name: item_list
    Input: a list
    Output: list of class
    Does: read data from items_data and make it a list of class item

    Name: puz_monster_list
    Input: a list
    Output: list of class
    Does: read data from puz_monster_data and make it a list of class puz and
    monster

    Name: room_list
    Input: a list
    Output: list of class
    Does: read data from rooms_data and make it a list of class room

    Name: adjust_roomlist
    Input: two list of class
    Output: list of class
    Does: put relative puzzles and monsters into rooms

    Name: menu
    Input: a string
    Returns: A string, which is users choice if it's in D, W, P, or Q. if not,
    they will have to chooce agian.

    Name: move
    Input: adjecent_room, a list of direction; choose, a string of players choice;
    current_room, an int of the current room players are in.
    Returns: an int, if they can go to the room. Otherwise, it will return
    current_room, which plays will stay and cannot move to other rooms.
    Does: to change current location or stay

    Name: check_weight
    Input: a int, weight; a dictionary, weight_dic; a string, pick
    Output: Boolean
    Does: check if the weight can be handled.

    Name: look
    Input: looking_stuff, a string of item players want to look. items_class,
    a list of class items.
    Returns: None
    Does: to print the description of the item players looking for

    Name: check_item
    Input: None
    Returns: None
    Does: print items the play is carrying.

    Name: game
    Input: 3 strings, which are the file name of 3 data txt documents.
    Returns: None
    Does: the core function of this game.

  Last but not the least, it has unittest to test its correctness. 3 core
functions are tested, which are move(), check_item(), check_weight(). move() is
the one of the most important function in this program. It controls the current
location of the player, which is the core of this program. It is tested by
assertEqual() to verify the integer. check_item() is tested by patch() and
mocked_print to check its print. check_weight is tested by assertTrue() and
assertFalse() to check its boolean value. If the play cannot carry the weight,
which means the weight of inventory + the weight of the item that is going to be
taken <= 10, it will return True. Otherwise, it will return False.
